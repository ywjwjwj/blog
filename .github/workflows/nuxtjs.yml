# Sample workflow for building and deploying a Nuxt site to GitHub Pages
#
# To get started with Nuxt see: https://nuxtjs.org/docs/get-started/installation
#
name: Deploy Nuxt site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    tags: # 当我们提交代码为tag 是以'v'开头的时候才会触发自动部署到服务端 如 git push tag v0.1.0
      - 'v*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      # 第一步：下载源码（CI/CD拉取代码到自己的本地）
      - name: Checkout
        uses: actions/checkout@v3
        
      # 第二步：打包构建
      - name: Build
        uses: actions/setup-node@master
      - run: npm install -g pnpm # 安装第三方包
      - run: pnpm install # 安装第三方包
      - run: pnpm build # 打包
      - run: tar -zcvf release.tgz -C .output .
      # 把.nuxt、nuxt.config.js等文件，打包压缩为release.tgz 不包含dist目录
      
      # 第三步：发布 Release
      - name: Create Release # 创建Release，可以在仓库看到一个个版本
        id: create_release
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.TK }} # 之前GitHub添加的Token
        with:
          tag_name: ${{ github.ref }} # (tag)标签名称
          release_name: Release ${{ github.ref }}
          draft: false # 是否是草稿
          prerelease: false # 是否是预发布

      # 第四步：上传构建结果到 Release（把打包的tgz上传到Release）
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.TK }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: ./release.tgz # 要上传文件
          asset_name: release.tgz # 上传后的文件名
          asset_content_type: application/x-tgz
          
      # 第五步：部署到服务器
      - name: Deploy
        uses: appleboy/ssh-action@master # 使用ssh链接服务器
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: | # 执行命令（运行到服务器）cd：要确保服务器有这个目录； wget：下载上一步的release到服务器； tar：解压； 安装依赖；启动服务  放到nginx静态目录下
            cd /opt/web/blog &&
            wget https://gh.yangood.top/https://github.com/ywjwjwj/blog/releases/latest/download/release.tgz -O release.tgz &&
            tar zxvf release.tgz &&
            pm2 restart blog
            
#如何提交
#git add .
#git commit -m "feat: 第一次发布部署"
#git push(此时只是推送了提交记录，并不会触发自动化构建部署)
#git add .
#git tag v1.0.0(通过tag打版)
#git tag(查看版本)
#git push origin v1.0.0(把本地标签推送到远程仓库，会触发自动构建部署)
#执行完上面的命令GitHub Actions将自动打包部署到服务器

#删除tag
#git tag -d v1.0.0
#提交删除tag
#git push origin :v1.0.0
